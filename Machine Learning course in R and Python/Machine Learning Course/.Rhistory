# dataset$Age <-
#   sapply(dataset$Age, function(x) (x-min(dataset$Age))/(max(dataset$Age)-min(dataset$Age)))
# Chunk 7
#
# #Standardised
# dataset$Salary <-
#   sapply(dataset$Salary, function(x) (x-mean(dataset$Salary))/sd(dataset$Salary))
#
# #Normalised
# dataset$Salary <-
#   sapply(dataset$Salary, function(x) (x-min(dataset$Salary))/(max(dataset$Salary)-min(dataset$Salary)))
# Chunk 8
set.seed(123)
dataset <-
read.csv(file = "Part2_Regression/Simple_Linear_Regression/Salary_Data.csv")
split <-
sample.split(dataset$Salary, SplitRatio = 2/3)
training_set <-
dataset[split,]
test_set <-
dataset[!split,]
regressor <-
lm(formula = Salary~., training_set)
y_pred <- predict(regressor, newdata = test_set)
#Plot the data
ggplot()+ geom_point(data = test_set, aes(x = test_set$YearsExperience, y = test_set$Salary))
y_pred <- predict(regressor, newdata = test_set)
y_pred
test_set
y_pred %>% data.frame
y_pred <- predict(regressor, newdata = test_set) %>% data.frame
y_pred <- predict(regressor, newdata = test_set) %>% data.frame
#Plot the data
ggplot()+
geom_point(data = test_set, aes(x = test_set$YearsExperience, y = test_set$Salary))+
geom_line(data = y_pred, aes(x = test_set$YearsExperience, y = y_pred$.))
test_set
y_pred
y_pred <-
predict(regressor, newdata = test_set) %>%
data.frame
#Plot the predictions over the test data
ggplot() +
geom_point(data = test_set, aes(x = test_set$YearsExperience,
y = test_set$Salary)) +
geom_line(data = y_pred, aes(x = test_set$YearsExperience,
y = predict(regressor, newdata = test_set)))
y_pred <-
predict(regressor, newdata = test_set) %>%
data.frame
#Plot the predictions over the test data
ggplot() +
geom_point(data = test_set, aes(x = test_set$YearsExperience,
y = test_set$Salary)) +
geom_line(stat = smooth, data = y_pred, aes(x = test_set$YearsExperience,
y = y_pred$.))
y_pred <-
predict(regressor, newdata = test_set) %>%
data.frame
#Plot the predictions over the test data
ggplot() +
geom_point(data = test_set, aes(x = test_set$YearsExperience,
y = test_set$Salary)) +
geom_line(stat = "smooth", data = y_pred, aes(x = test_set$YearsExperience,
y = y_pred$.))
y_pred <-
predict(regressor, newdata = test_set) %>%
data.frame
#Plot the predictions over the test data
ggplot() +
geom_point(data = test_set, aes(x = test_set$YearsExperience,
y = test_set$Salary)) +
geom_smooth(data = y_pred, aes(x = test_set$YearsExperience,
y = y_pred$.))
y_pred <-
predict(regressor, newdata = test_set) %>%
data.frame
#Plot the predictions over the test data
ggplot() +
geom_point(data = test_set, aes(x = test_set$YearsExperience,
y = test_set$Salary)) +
geom_smooth(data = y_pred, aes(x = test_set$YearsExperience,
y = predict(regressor, newdata = test_set)))
y_pred <-
predict(regressor, newdata = test_set) %>%
data.frame
#Plot the predictions over the test data
ggplot() +
geom_point(data = test_set, aes(x = test_set$YearsExperience,
y = test_set$Salary)) +
geom_smooth(se = TRUE, data = y_pred, aes(x = test_set$YearsExperience,
y = predict(regressor, newdata = test_set)))
y_pred <-
predict(regressor, newdata = test_set) %>%
data.frame
#Plot the predictions over the test data
ggplot() +
geom_point(data = test_set, aes(x = test_set$YearsExperience,
y = test_set$Salary)) +
geom_smooth(se = TRUE, data = y_pred, aes(x = test_set$YearsExperience,
y = predict(regressor, newdata = test_set)))
y_pred <-
predict(regressor, newdata = test_set) %>%
data.frame
#Plot the predictions over the test
ggplot() +
geom_point(data = test_set, aes(x = test_set$YearsExperience,
y = test_set$Salary)) +
geom_line(data = y_pred, aes(x = test_set$YearsExperience,
y = y_pred$.))+
stat_smooth()
y_pred <-
predict(regressor, newdata = test_set) %>%
data.frame
#Plot the predictions over the test
ggplot() +
geom_point(data = test_set, aes(x = test_set$YearsExperience,
y = test_set$Salary)) +
geom_line(data = y_pred, aes(x = test_set$YearsExperience,
y = y_pred$.))+
stat_smooth()
dataset <- <-
read.csv("Part2_Regression/Multiple-Linear-Regression/Multiple_Linear_Regression/50_Startups.csv")
dataset
dataset <-
read.csv("Part2_Regression/Multiple-Linear-Regression/Multiple_Linear_Regression/50_Startups.csv")
dataset %>% nrow()
split <-
sample.split(dataset$Profit, SplitRatio = 6/10)
training_set <-
dataset[split,]
test_set <-
dataset[!split,]
training_set %>% names()
regressor <-
lm(formula = Profit~., training_set)
regressor
summary(regressor)
regressor <-
lm(formula = Profit~R.D.Spend, training_set)
summary(regressor)
Profit_pred <-
predict(regressor, training_set)
ggplot()+
geom_point())
ggplot()+
geom_point()
ggplot()+
geom_point(data = training_set)
dataset %>% spread(State, state)
dataset %>% spread(State, State)
dataset[,5:7] %in% c("California", "Florida", "New York")
dataset %>% spread(State, State) %>% .[,"California"] %% "California"
dataset %>% spread(State, State) %>% .[,"California"][which(.[,"California"] == "California")] <- 1
dataset %>% spread(State, State) %>% .[,"California"][which(.[,"California"] == "California")]
require(dplyr)
require(tidyr)
require(caTools)
require(ggplot2)
# install.packages("purrr")
require(purrr)
iris %>% nest(-Species)
chickwts %>% nest(weight)
if (require("gapminder")) {
gapminder %>%
group_by(country, continent) %>%
nest()
gapminder %>%
nest(-country, -continent)
}
iris
iris %>% nest(-Species)
iris
iris
iris %>% nest(-Species)
iris %>% nest(-Species)[1]
iris %>% nest(-Species) %>% .[1]
iris %>% nest(-Species) %>% .[2]
iris %>% nest(-Species) %>% .[3]
```{r}
iris %>% nest(-Species) %>% str
chickwts %>% nest(weight)
chickwts
chickwts %>% nest(weight)
chickwts
chickwts %>% nest(weight) %>% .["horsebean"]
chickwts %>% nest(weight) %>% .[,"horsebean"]
chickwts %>% nest(weight) %>% .[1,]]
chickwts %>% nest(weight) %>% .[1,]]
chickwts %>% nest(weight) %>% .[,]]
chickwts %>% nest(weight) %>% .[,1]
chickwts %>% nest(weight) %>% .[1,]
chickwts %>% nest(weight) %>% .[1,][,2]
chickwts %>% nest(weight) %>% .[1]
chickwts %>% nest(weight) %>% .[1][]
chickwts %>% nest(weight) %>% .$feed
1:10 %>% accumulate_right(`*`)
1:3 %>% accumulate(`+`)
iris %>% nest(-Species)
iris
iris %>% nest(-Species) %>% .[[1]]
iris %>% nest(-Species)
iris %>% nest(-Species) %>% .[[2]]
iris %>% nest(-Species) %>% .[[3]]
iris %>% nest(-Species) %>% .[[2]]
iris %>% nest(-Species) %>% .[[2]]
iris %>% nest(-Species) %>% .[[2]] -> List_df
lapply(List_df,function(x) mutate_each(`+`))
lapply(List_df,function(x) mutate_each(funs(accumulate(`+`)))
lapply(List_df,function(x) mutate_each(funs(accumulate(`+`))))
lapply(List_df,function(x) mutate_each(funs(accumulate(.,`+`))))
lapply(List_df,function(x) mutate_each(funs(sum())))
lapply(List_df,function(x) summarise(mean())
lapply(List_df,function(x) summarise(mean()))
lapply(List_df,function(x) mutate_each(x,funs(accumulate(.,`+`))))
dataset <-
read.csv("Part3_Polynomial_Regression/Polynomial_Regression/Position_Salaries.csv")
regressor <- lm(formula = Salary~Level, dataset)
Linear_regressor <-
predict(regressor, dataset) %>% data.frame()
ggplot() +
geom_point(data = dataset, aes(x = dataset$Level,
y = dataset$Salary)) +
geom_line(data = y_pred, aes(x = dataset$Level,
y = Linear_regressor$.))
regressor <- lm(formula = Salary~Level, dataset)
Linear_regressor <-
predict(regressor, dataset) %>% data.frame()
ggplot() +
geom_point(data = dataset, aes(x = dataset$Level,
y = dataset$Salary)) +
geom_line(data = dataset, aes(x = dataset$Level,
y = Linear_regressor$.))
Value_Prediction <-
predict(regressor, data.frame(Level = 6.5))
dataset
dataset
dataset <-
read.csv("Part2_Regression/Multiple-Linear-Regression/Multiple_Linear_Regression/50_Startups.csv")
dataset
regressor <-
lm(formula = Profit~., training_set)
Poly_Regressor <-
lm(formula = Salary~poly(Level,9), dataset)
dataset <-
read.csv("Part3_Polynomial_Regression/Polynomial_Regression/Position_Salaries.csv")
regressor <- lm(formula = Salary~Level, dataset)
Linear_regressor <-
predict(regressor, dataset) %>% data.frame()
ggplot() +
geom_point(data = dataset, aes(x = dataset$Level,
y = dataset$Salary)) +
geom_line(data = dataset, aes(x = dataset$Level,
y = Linear_regressor$.))
Value_Prediction <-
predict(regressor, data.frame(Level = 6.5))
summary(regressor)
summary(regressor)$r.squared
summary(regressor) %>% names
summary(regressor)$terms
1:10 %>%
map(rnorm, n = 10) %>%
map_dbl(mean)
1:10 %>%
map(function(x) rnorm(10, x))
1:10 %>%
lappy(.,function(x) rnorm(10, x))
1:10 %>%
lapply(.,function(x) rnorm(10, x))
1:10 %>%
map(function(x) rnorm(10, x))
knitr::opts_chunk$set(echo = TRUE)
dataset <-
read.csv(file = "Part_4_Clustering/K_Means/K_Means/Mall_Customers.csv")
fread("Part_4_Clustering/K_Means/K_Means/Mall_Customers.csv")
data.table::fread("Part_4_Clustering/K_Means/K_Means/Mall_Customers.csv")
data.table::fread("Part_4_Clustering/K_Means/K_Means/Mall_Customers.csv")
%>% tbl_df
require(tidyverse)
data.table::fread("Part_4_Clustering/K_Means/K_Means/Mall_Customers.csv")
%>% tbl_df
require(dplyr)
data.table::fread("Part_4_Clustering/K_Means/K_Means/Mall_Customers.csv")
%>% tbl_df
data.table::fread("Part_4_Clustering/K_Means/K_Means/Mall_Customers.csv")%>% tbl_df
dataset <-
# read.csv(file = "Part_4_Clustering/K_Means/K_Means/Mall_Customers.csv")
fread("Part_4_Clustering/K_Means/K_Means/Mall_Customers.csv")
dataset <-
data.table::fread("Part_4_Clustering/K_Means/K_Means/Mall_Customers.csv")
dataset
dataset
subset <-
dataset %>% select(`Annual Income (k$)`, `Spending Score (1-100)`)
wcss <- vector()
kmeans(subset, 5)
kmeans(subset, 5) %>% str
kmeans(subset, 5) -> test
for(i in 1:50){
wcss[i] <- sum(kmeans(subset,i)$withinss)
}
wcss %>% plot
require(cluster)
dataset %>% select(4:5) %>% names
cluster_1 <- kmeans(dataset %>% select(4:5), 5, iter.max = 1000, nstart = 10)
clusplot(
dataset %>% select(4:5),
cluster_1$cluster,
lines = 0,
shade = FALSE,
color = TRUE,
labels = 1,
plotchar = FALSE,
span = TRUE,
main = "main title",
xlab = "x title",
ylab = "y title"
)
dataset %>% names
dataset %>% select(Genre:`Spending Score (1-100)`) %>% names
subset_2 <-
dataset %>%
select(Genre:`Spending Score (1-100)`)
wcss_2 <- vector()
for(i in 1:50){
wcss_2[i] <- sum(kmeans(subset_2,i)$withinss)
}
wcss_2 <- vector()
for(i in 1:50){
wcss_2[i] <- sum(kmeans(subset_2,i)$withinss)
}
subset_2
subset_2 <-
dataset %>%
select(Genre:`Spending Score (1-100)`) %>%
mutate(Genre = factor(Genre, levels = c(0,1),labels = c("Female","Male")))
subset_2
subset_2 <-
dataset %>%
select(Genre:`Spending Score (1-100)`) %>%
mutate(Genre = factor(Genre, labels = c(0,1),levels = c("Female","Male")))
subset_2
subset_2 <-
dataset %>%
select(Genre:`Spending Score (1-100)`) %>%
mutate(Genre = factor(Genre, labels = c(0,1),levels = c("Female","Male")))
wcss_2 <- vector()
for(i in 1:50){
wcss_2[i] <- sum(kmeans(subset_2,i)$withinss)
}
wcss_2 %>% plot
wcss_2
wcss_2 %>% tbl_df() %>% sort
wcss_2 %>% tbl_df()
wcss_2 %>% tbl_df() %>% arrange(value)
wcss_2 %>% tbl_df() %>% View
wcss_2 %>% tbl_df() %>% arrange(value)
wcss_2 %>% tbl_df() %>% arrange(-value)
wcss_2 %>% tbl_df() %>% arrange(-value) %>% mutate(clusters = seq_along(value))
wcss_2 %>% plot
wcss_2 %>%
tbl_df() %>%
arrange(-value) %>%
mutate(clusters = seq_along(value),
gradient = value-lag(value))
wcss_2 %>%
tbl_df() %>%
arrange(-value) %>%
mutate(clusters = seq_along(value),
gradient = value-lag(value)) %>%
mutate_all(round)
wcss_2 %>%
tbl_df() %>%
arrange(-value) %>%
mutate(clusters = seq_along(value),
gradient = lag(value)-value) %>%
mutate_all(round)
wcss_2 %>%
tbl_df() %>%
arrange(-value) %>%
mutate(clusters = seq_along(value),
gradient = lag(value)-value,
gradient_rate_change = lag(gradient)-gradient) %>%
mutate_all(round)
cluster_2 <- kmeans(subset_2, 7, iter.max = 1000, nstart = 10)
clusplot(
subset_2,
cluster_2$cluster,
lines = 0,
shade = FALSE,
color = TRUE,
labels = 1,
plotchar = FALSE,
span = TRUE,
main = "main title",
xlab = "x title",
ylab = "y title"
)
cluster_2
cluster_2
require(data.table)
dataset <-
fread("Part_4_Clustering/Hierarchical-Clustering/Hierarchical_Clustering/Mall_Customers.csv")
dataset
subset <-
dataset %>% select(`Annual Income (k$)`,`Spending Score (1-100)`)
dendogram <- hclust(d = dist(subset, method = "euclidean") ,
method = "ward.D")
dendogram %>% plot
dendogram %>% plot(ylim(0,250))
dendogram %>% plot(ylim(c(0,250)))
dendogram %>% plot(ylim=c(0,250))
dendogram %>% plot(ylim=c(0, 200) )
HC
HC <- hclust(d = dist(subset, method = "euclidean") ,
method = "ward.D")
HC
cutree(HC)
cutree(HC,10)
HC %>% plot
HC %>% plot
HC %>% cutree(k = 5)
HC_clusters <-
HC %>% cutree(k = 5)
clusplot(
HC_clusters,
HC_clusters$cluster,
lines = 0,
shade = FALSE,
color = TRUE,
labels = 1,
plotchar = FALSE,
span = TRUE,
main = "main title",
xlab = "x title",
ylab = "y title"
)
clusplot(
HC,
HC_clusters,
lines = 0,
shade = FALSE,
color = TRUE,
labels = 1,
plotchar = FALSE,
span = TRUE,
main = "main title",
xlab = "x title",
ylab = "y title"
)
HC_clusters <-
HC %>% cutree(k = 5) # 5 clusters
clusplot(
subset,
HC_clusters,
lines = 0,
shade = FALSE,
color = TRUE,
labels = 1,
plotchar = FALSE,
span = TRUE,
main = "main title",
xlab = "x title",
ylab = "y title"
)
knitr::opts_chunk$set(echo = TRUE)
require(tidyr)
require(caTools)
require(ggplot2)
# install.packages("purrr")
require(purrr)
require(dplyr)
require(data.table)
require(cluster)
#Import the data from 'data.csv'
dataset <-
read.csv("Part 1/7_Data.csv", header = TRUE)
# #My manual control for NA values
# meanAge <-
#   mean(dataset$Age, na.rm = TRUE)
# dataset$Age[which(is.na(dataset$Age))] <-
#   meanAge
#
# meanSalary <-
#   mean(dataset$Salary, na.rm = TRUE)
# dataset$Salary[which(is.na(dataset$Salary))] <-
#   meanSalary
#Tutorial method for dealing with NA
dataset$Age <- ifelse(is.na(dataset$Age),mean(dataset$Age,na.rm = T),dataset$Age)
dataset$Salary <- ifelse(is.na(dataset$Salary),mean(dataset$Salary,na.rm = T),dataset$Age)
X <-
dataset[,-4]
Y <-
dataset[, 4]
#Encode the categorical variables into numbers
#Purchased variable
dataset$Purchased <- ifelse(dataset$Purchased == "Yes", 1, 0)
dataset$Country <- dataset$Country %>% factor(levels = c("France", "Spain", "Germany"),
labels = c(1, 2, 3))
# #If we want to further spread the Country into clasification (as with logistic regression) I would use this:
# dataset %>%
#   spread(Country, Country) %>%
#   rename(France = 1, Spain = 2, Germany = 3)
#We use caTools
set.seed(123)
split <-
sample.split(dataset$Purchased, SplitRatio = 0.8)
training_set <- subset(dataset, split == T)
test_set <- subset(dataset, split == F)
# #Or my own faster way
# Train <- dataset[split,]
# Test <- dataset[!split,]
