dataset
dataset
subset <-
dataset %>% select(`Annual Income (k$)`, `Spending Score (1-100)`)
wcss <- vector()
kmeans(subset, 5)
kmeans(subset, 5) %>% str
kmeans(subset, 5) -> test
for(i in 1:50){
wcss[i] <- sum(kmeans(subset,i)$withinss)
}
wcss %>% plot
require(cluster)
dataset %>% select(4:5) %>% names
cluster_1 <- kmeans(dataset %>% select(4:5), 5, iter.max = 1000, nstart = 10)
clusplot(
dataset %>% select(4:5),
cluster_1$cluster,
lines = 0,
shade = FALSE,
color = TRUE,
labels = 1,
plotchar = FALSE,
span = TRUE,
main = "main title",
xlab = "x title",
ylab = "y title"
)
dataset %>% names
dataset %>% select(Genre:`Spending Score (1-100)`) %>% names
subset_2 <-
dataset %>%
select(Genre:`Spending Score (1-100)`)
wcss_2 <- vector()
for(i in 1:50){
wcss_2[i] <- sum(kmeans(subset_2,i)$withinss)
}
wcss_2 <- vector()
for(i in 1:50){
wcss_2[i] <- sum(kmeans(subset_2,i)$withinss)
}
subset_2
subset_2 <-
dataset %>%
select(Genre:`Spending Score (1-100)`) %>%
mutate(Genre = factor(Genre, levels = c(0,1),labels = c("Female","Male")))
subset_2
subset_2 <-
dataset %>%
select(Genre:`Spending Score (1-100)`) %>%
mutate(Genre = factor(Genre, labels = c(0,1),levels = c("Female","Male")))
subset_2
subset_2 <-
dataset %>%
select(Genre:`Spending Score (1-100)`) %>%
mutate(Genre = factor(Genre, labels = c(0,1),levels = c("Female","Male")))
wcss_2 <- vector()
for(i in 1:50){
wcss_2[i] <- sum(kmeans(subset_2,i)$withinss)
}
wcss_2 %>% plot
wcss_2
wcss_2 %>% tbl_df() %>% sort
wcss_2 %>% tbl_df()
wcss_2 %>% tbl_df() %>% arrange(value)
wcss_2 %>% tbl_df() %>% View
wcss_2 %>% tbl_df() %>% arrange(value)
wcss_2 %>% tbl_df() %>% arrange(-value)
wcss_2 %>% tbl_df() %>% arrange(-value) %>% mutate(clusters = seq_along(value))
wcss_2 %>% plot
wcss_2 %>%
tbl_df() %>%
arrange(-value) %>%
mutate(clusters = seq_along(value),
gradient = value-lag(value))
wcss_2 %>%
tbl_df() %>%
arrange(-value) %>%
mutate(clusters = seq_along(value),
gradient = value-lag(value)) %>%
mutate_all(round)
wcss_2 %>%
tbl_df() %>%
arrange(-value) %>%
mutate(clusters = seq_along(value),
gradient = lag(value)-value) %>%
mutate_all(round)
wcss_2 %>%
tbl_df() %>%
arrange(-value) %>%
mutate(clusters = seq_along(value),
gradient = lag(value)-value,
gradient_rate_change = lag(gradient)-gradient) %>%
mutate_all(round)
cluster_2 <- kmeans(subset_2, 7, iter.max = 1000, nstart = 10)
clusplot(
subset_2,
cluster_2$cluster,
lines = 0,
shade = FALSE,
color = TRUE,
labels = 1,
plotchar = FALSE,
span = TRUE,
main = "main title",
xlab = "x title",
ylab = "y title"
)
cluster_2
cluster_2
require(data.table)
dataset <-
fread("Part_4_Clustering/Hierarchical-Clustering/Hierarchical_Clustering/Mall_Customers.csv")
dataset
subset <-
dataset %>% select(`Annual Income (k$)`,`Spending Score (1-100)`)
dendogram <- hclust(d = dist(subset, method = "euclidean") ,
method = "ward.D")
dendogram %>% plot
dendogram %>% plot(ylim(0,250))
dendogram %>% plot(ylim(c(0,250)))
dendogram %>% plot(ylim=c(0,250))
dendogram %>% plot(ylim=c(0, 200) )
HC
HC <- hclust(d = dist(subset, method = "euclidean") ,
method = "ward.D")
HC
cutree(HC)
cutree(HC,10)
HC %>% plot
HC %>% plot
HC %>% cutree(k = 5)
HC_clusters <-
HC %>% cutree(k = 5)
clusplot(
HC_clusters,
HC_clusters$cluster,
lines = 0,
shade = FALSE,
color = TRUE,
labels = 1,
plotchar = FALSE,
span = TRUE,
main = "main title",
xlab = "x title",
ylab = "y title"
)
clusplot(
HC,
HC_clusters,
lines = 0,
shade = FALSE,
color = TRUE,
labels = 1,
plotchar = FALSE,
span = TRUE,
main = "main title",
xlab = "x title",
ylab = "y title"
)
HC_clusters <-
HC %>% cutree(k = 5) # 5 clusters
clusplot(
subset,
HC_clusters,
lines = 0,
shade = FALSE,
color = TRUE,
labels = 1,
plotchar = FALSE,
span = TRUE,
main = "main title",
xlab = "x title",
ylab = "y title"
)
knitr::opts_chunk$set(echo = TRUE)
require(tidyr)
require(caTools)
require(ggplot2)
# install.packages("purrr")
require(purrr)
require(dplyr)
require(data.table)
require(cluster)
#Import the data from 'data.csv'
dataset <-
read.csv("Part 1/7_Data.csv", header = TRUE)
# #My manual control for NA values
# meanAge <-
#   mean(dataset$Age, na.rm = TRUE)
# dataset$Age[which(is.na(dataset$Age))] <-
#   meanAge
#
# meanSalary <-
#   mean(dataset$Salary, na.rm = TRUE)
# dataset$Salary[which(is.na(dataset$Salary))] <-
#   meanSalary
#Tutorial method for dealing with NA
dataset$Age <- ifelse(is.na(dataset$Age),mean(dataset$Age,na.rm = T),dataset$Age)
dataset$Salary <- ifelse(is.na(dataset$Salary),mean(dataset$Salary,na.rm = T),dataset$Age)
X <-
dataset[,-4]
Y <-
dataset[, 4]
#Encode the categorical variables into numbers
#Purchased variable
dataset$Purchased <- ifelse(dataset$Purchased == "Yes", 1, 0)
dataset$Country <- dataset$Country %>% factor(levels = c("France", "Spain", "Germany"),
labels = c(1, 2, 3))
# #If we want to further spread the Country into clasification (as with logistic regression) I would use this:
# dataset %>%
#   spread(Country, Country) %>%
#   rename(France = 1, Spain = 2, Germany = 3)
#We use caTools
set.seed(123)
split <-
sample.split(dataset$Purchased, SplitRatio = 0.8)
training_set <- subset(dataset, split == T)
test_set <- subset(dataset, split == F)
# #Or my own faster way
# Train <- dataset[split,]
# Test <- dataset[!split,]
knitr::opts_chunk$set(echo = TRUE)
x_grid <- seq(from = min(dataset$Level), to = max(dataset$Level), 0.01)
require(tidyr)
require(caTools)
require(ggplot2)
# install.packages("purrr")
require(purrr)
require(dplyr)
require(data.table)
require(cluster)
require(e1071)
require(rpart)
knitr::opts_chunk$set(echo = TRUE)
require(tidyr)
require(caTools)
require(ggplot2)
# install.packages("purrr")
require(purrr)
require(dplyr)
require(data.table)
require(cluster)
require(e1071)
require(rpart)
#Import the data from 'data.csv'
dataset <-
read.csv("Part 1/7_Data.csv", header = TRUE)
# #My manual control for NA values
# meanAge <-
#   mean(dataset$Age, na.rm = TRUE)
# dataset$Age[which(is.na(dataset$Age))] <-
#   meanAge
#
# meanSalary <-
#   mean(dataset$Salary, na.rm = TRUE)
# dataset$Salary[which(is.na(dataset$Salary))] <-
#   meanSalary
#Tutorial method for dealing with NA
dataset$Age <- ifelse(is.na(dataset$Age),mean(dataset$Age,na.rm = T),dataset$Age)
dataset$Salary <- ifelse(is.na(dataset$Salary),mean(dataset$Salary,na.rm = T),dataset$Age)
X <-
dataset[,-4]
Y <-
dataset[, 4]
#Encode the categorical variables into numbers
#Purchased variable
dataset$Purchased <- ifelse(dataset$Purchased == "Yes", 1, 0)
dataset$Country <- dataset$Country %>% factor(levels = c("France", "Spain", "Germany"),
labels = c(1, 2, 3))
# #If we want to further spread the Country into clasification (as with logistic regression) I would use this:
# dataset %>%
#   spread(Country, Country) %>%
#   rename(France = 1, Spain = 2, Germany = 3)
#We use caTools
set.seed(123)
split <-
sample.split(dataset$Purchased, SplitRatio = 0.8)
training_set <- subset(dataset, split == T)
test_set <- subset(dataset, split == F)
# #Or my own faster way
# Train <- dataset[split,]
# Test <- dataset[!split,]
training_set[,2:3] <- scale(training_set[,2:3] )
test_set[,2:3]  <- scale(test_set[,2:3] )
set.seed(123)
dataset <-
read.csv(file = "Part2_Regression/Simple_Linear_Regression/Salary_Data.csv")
split <-
sample.split(dataset$Salary, SplitRatio = 2/3)
training_set <-
dataset[split,]
test_set <-
dataset[!split,]
regressor <-
lm(formula = Salary~., training_set)
y_pred <-
predict(regressor, newdata = test_set) %>%
data.frame
#Plot the predictions over the test
ggplot() +
geom_point(data = test_set, aes(x = test_set$YearsExperience,
y = test_set$Salary)) +
geom_line(data = y_pred, aes(x = test_set$YearsExperience,
y = y_pred$.))+
stat_smooth()
dataset <-
read.csv("Part2_Regression/Multiple-Linear-Regression/Multiple_Linear_Regression/50_Startups.csv")
dataset
dataset$State <- dataset$State %>% factor(levels = c("New York", "California", "Florida"),
labels = c(1, 2, 3))
dataset
dataset$State <- dataset$State %>% factor(levels = c("New York", "California", "Florida"),
labels = c(1, 2, 3))
dataset
split <-
sample.split(dataset$Profit, SplitRatio = 8/10)
training_set <-
dataset[split,]
training_set
test_set <-
dataset[!split,]
test_set
regressor <-
lm(formula = Profit~., training_set)
regressor <-
lm(formula = Profit~., training_set)
summary(regressor)
training_set
dataset$State <- dataset$State %>% factor(levels = c("New York", "California", "Florida"),
labels = c(1, 2, 3))
dataset$State
dataset$State <- dataset$State %>% forcats::factor(levels = c("New York", "California", "Florida"),
labels = c(1, 2, 3))
dataset$State <- dataset$State %>% forcats::as_factor(levels = c("New York", "California", "Florida"),
labels = c(1, 2, 3))
dataset
dataset$State
dataset <-
read.csv("Part2_Regression/Multiple-Linear-Regression/Multiple_Linear_Regression/50_Startups.csv")
dataset
dataset
dataset <-
read.csv("Part2_Regression/Multiple-Linear-Regression/Multiple_Linear_Regression/50_Startups.csv")
dataset
dataset$State <- dataset$State %>% forcats::as_factor(levels = c("New York", "California", "Florida"),
labels = c(1, 2, 3))
dataset
dataset
split <-
sample.split(dataset$Profit, SplitRatio = 8/10)
training_set <-
dataset[split,]
training_set
test_set <-
dataset[!split,]
test_set
regressor <-
lm(formula = Profit~., training_set)
summary(regressor)
Profit_pred <-
predict(regressor, test_set)
Compare_df <-
cbind(test_set, Profit_pred)
Compare_df %>% mutate(Accuracy = abs(Profit_pred-Profit)/Profit)
p_value <- 0.05
#Remove the State variable
regressor <-
lm(formula = Profit ~ R.D.Spend + Administration + Marketing.Spend, dataset)
summary(regressor)
#Remove the Administration variable
regressor <-
lm(formula = Profit ~ R.D.Spend + Marketing.Spend, dataset)
summary(regressor)
#Remove the State & Marketing spend variable
regressor <-
lm(formula = Profit ~ R.D.Spend + Administration, dataset)
summary(regressor)
dataset <-
read.csv("Part3_Polynomial_Regression/Polynomial_Regression/Position_Salaries.csv")
regressor <- lm(formula = Salary~Level, dataset)
Linear_regressor <-
predict(regressor, dataset) %>% data.frame()
ggplot() +
geom_point(data = dataset, aes(x = dataset$Level,
y = dataset$Salary)) +
geom_line(data = dataset, aes(x = dataset$Level,
y = Linear_regressor$.))
Value_Prediction <-
predict(regressor, data.frame(Level = 6.5))
Poly_Regressor <-
lm(formula = Salary~poly(Level,9), dataset)
Poly_predict <-
predict(Poly_Regressor, dataset) %>% data.frame()
ggplot() +
geom_point(data = dataset, aes(x = dataset$Level,
y = dataset$Salary)) +
geom_line(data = y_pred, aes(x = dataset$Level,
y = Poly_predict$.))
Value_Prediction <-
predict(Poly_Regressor, data.frame(Level = 6.5))
Value_Prediction
Log_Regressor <-
lm(formula = log(Salary)~Level, dataset)
Log_prediction <-
exp(predict(Log_Regressor, dataset)) %>% data.frame()
ggplot() +
geom_point(data = dataset, aes(x = dataset$Level,
y = dataset$Salary)) +
geom_line(data = y_pred, aes(x = dataset$Level,
y = Log_prediction$.))
# TruthOrBluff <-
#   Log_prediction[which(Log_prediction$. <= 160000),1]
data <- read.csv(file = "Part2_Regression/SVR/SVR/Position_Salaries.csv")
head(data)
regressor <- svm(formula = Salary ~ .,data = data, type = "eps-regression")
y_pred <- predict(regressor, data) %>% data.frame()
# Value_Prediction <-
#   predict(regressor, data.frame(Level = 6.5, Position = modelr::typical(data$Position)))
ggplot() +
geom_point(data = data, aes(x = data$Level,
y = data$Salary)) +
geom_line(data = y_pred, aes(x = data$Level,
y = y_pred))
# geom_point(data = y_pred, aes(x = 6.5,
#                              y = Value_Prediction))
dataset <-
read.csv(file = "Part2_Regression/Decision_Tree_Regression/Decision_Tree_Regression/Position_Salaries.csv")
regressor <- rpart(formula = Salary ~ ., data = dataset)
y_predict <- predict(regressor, newdata = dataset) %>% data.frame
ggplot() +
geom_point(data = dataset, aes(x = dataset$Level,
y = dataset$Salary)) +
geom_line(data = y_predict, aes(x = dataset$Level,
y = y_predict))
regressor %>% summary
regressor %>% plot
ggplot() +
geom_point(data = dataset, aes(x = dataset$Level,
y = dataset$Salary)) +
geom_line(data = y_predict, aes(x = dataset$Level,
y = y_predict))
regressor <- rpart(formula = Salary ~ ., data = dataset, control = rpart.control(minsplit = 1))
y_predict <- predict(regressor, newdata = dataset) %>% data.frame
ggplot() +
geom_point(data = dataset, aes(x = dataset$Level,
y = dataset$Salary)) +
geom_line(data = y_predict, aes(x = dataset$Level,
y = y_predict))
regressor %>% plot
x_grid <- seq(from = min(dataset$Level), to = max(dataset$Level), 0.01)
y_predict <- predict(regressor, newdata = data.frame(Level = x_grid)) %>% data.frame
ggplot() +
geom_point(data = dataset, aes(x = dataset$Level,
y = dataset$Salary)) +
geom_line(data = y_predict, aes(x = x_grid,
y = y_predict))
x_grid <- seq(from = min(dataset$Level), to = max(dataset$Level), 0.01)
y_predict <- predict(regressor, newdata = data.frame(Level = x_grid)) %>% data.frame
regressor
y_predict <- predict(regressor, newdata = data.frame(Level = x_grid))
x_grid
data.frame(Level = x_grid)
y_predict <- predict(regressor, newdata = data.frame(Level = x_grid) %>% as.matrix()) %>% data.frame
y_predict <- predict(regressor, newdata = data.frame(Level = x_grid)) %>% data.frame
ggplot() +
geom_point(data = dataset, aes(x = dataset$Level,
y = dataset$Salary)) +
geom_line(data = y_predict, aes(x = x_grid,
y = y_predict))
ggplot() +
geom_point(data = dataset, aes(x = dataset$Level,
y = dataset$Salary)) +
geom_line(data = y_predict, aes(x = dataset$Level,
y = y_predict))
y_predict <- predict(regressor, newdata = data.frame(Level = x_grid))
regressor %>% class
require(rpart)
regressor %>% class
regressor %>% predict
y_predict <- predict(regressor, newdata = data.frame(Level = x_grid))
x_grid
salary_data <- data.table::fread("Part2_Regression/Random_Forest_Regression/Position_Salaries.csv")
library(randomForest)
predictor <-
randomForest::randomForest(data = salary_data,Salary~Level,ntree=10)
y_predict <- predict(predictor, data.frame(Level = 6.5))
x_range <- seq(min(salary_data$Level),max(salary_data$Level),0.01)
ggplot(data = salary_data, aes(x = Level,y = Salary), color = "red")+
geom_point()+
geom_smooth()+
geom_line(data = data.frame(Level = x_range),aes(x=x_range,y=predict(predictor,newdata=data.frame(Level = Level))), color = "blue")
library(caret)
library(e1071)
classification_data = iris
cvCtrl = caret::trainControl(method = "LGOCV",
p = 0.8,
number = 10,
savePredictions = T)
caret_forest_model <-
caret::train(data = classification_data, Species~., method = "rf", keep.forest=TRUE, trControl = cvCtrl
# , sampsize=10000,ntree=40
)
caret_forest_model %>% plot
varImp(caret_forest_model) %>% plot
caret_forest_model$results
varImp(caret_forest_model) %>% plot
caret_forest_model$results
caret_forest_model %>% plot
varImp(caret_forest_model) %>% plot
update.packages()
update.packages(ask = FALSE)
