{
    "collab_server" : "",
    "contents" : "require(stringdist)\n# require()\n\ntest_data <- \n  read.csv(file = \"C:/Users/User-pc/Desktop/Kaggle Project/Data/products.csv/products.csv\")\n\ntest_data %>% dim\ntest_data %>% names\n\nUnique_entries <- \ntest_data$product_name %>% unique %>% length\n\n\n\n# build a convenient function to do all of the above\nGroupFactorsTogether <- function(objData, variableName, clustersize=200, method='jw') {\n  #      osa: Optimal string aligment, (restricted Damerau-Levenshtein distance).\n  #      lv: Levenshtein distance (as in R's native adist).\n  #      dl: Full Damerau-Levenshtein distance.\n  #      hamming: Hamming distance (a and b must have same nr of characters).\n  #      lcs: Longest common substring distance.\n  #      qgram: q-gram distance.\n  #      cosine: cosine distance between q-gram profiles\n  #      jaccard: Jaccard distance between q-gram profiles\n  #      jw: Jaro, or Jaro-Winker distance.\n  #      soundex: Distance based on soundex encoding\n  \n  #       stringdistmatrix(a, b, method = c(\"osa\", \"lv\", \"dl\", \"hamming\", \"lcs\",\n  #               \"qgram\", \"cosine\", \"jaccard\", \"jw\", useBytes = FALSE,\n  #               weight = c(d = 1, i = 1, s = 1, t = 1), maxDist = Inf, q = 1, p = 0,\n  #               useNames = FALSE, ncores = 1, cluster = NULL)\n  #               require(stringdist)\n  \n  str <- unique(as.character(objData[,variableName]))\n  print(paste('Uniques:',length(str)))\n  \n  d <- stringdistmatrix(str,str,method = c(method))\n  \n  rownames(d) <- str\n  hc <- hclust(as.dist(d))\n  \n  dfClust <- data.frame(str, cutree(hc, k=clustersize))\n  \n  # plot(table(dfClust$'cutree.hc..k...k.'))\n  \n  most_populated_clusters <- dfClust[dfClust$'cutree.hc..k...k.' > 5,]\n  names(most_populated_clusters) <- c('entry','cluster')\n  \n  # sort by most frequent\n  t <- table(most_populated_clusters$cluster)\n  t <- cbind(t,t/length(most_populated_clusters$cluster))\n  t <- t[order(t[,2], decreasing=TRUE),]\n  p <- data.frame(factorName=rownames(t), binCount=t[,1], percentFound=t[,2])\n  most_populated_clusters <- merge(x=most_populated_clusters, y=p, by.x = 'cluster', by.y='factorName', all.x=T)\n  most_populated_clusters <- most_populated_clusters[rev(order(most_populated_clusters$binCount)),]\n  names(most_populated_clusters) <-  c('cluster','entry')\n  return (most_populated_clusters[c('cluster','entry')])\n}\n\ntest_data <- \n  test_data %>% slice(1 : 25000)\n\n# GroupFactorsTogether(objData = test_data,\n                     # variableName = \"product_name\",\n                     # clustersize = Unique_entries/400,\n                     # method = \"lv\"\n#                       )\n\ntest_data -> objData\nvariableName = \"product_name\"\nclustersize = Unique_entries/400\n# method = \"lv\"\nmethod = 'jw'\n\nstr <- unique(as.character(objData[,variableName]))\nprint(paste('Uniques:',length(str)))\n\nd <- stringdistmatrix(str,str,method = c(method))\n\nrownames(d) <- str\nhc <- hclust(as.dist(d))\n\n\ndfClust <- data.frame(str, cutree(hc, k=clustersize))\n\n# plot(table(dfClust$'cutree.hc..k...k.'))\n\nmost_populated_clusters <- dfClust[dfClust$'cutree.hc..k...k.' > 5,]\nnames(most_populated_clusters) <- c('entry','cluster')\n\n# sort by most frequent\nt <- table(most_populated_clusters$cluster)\nt <- cbind(t,t/length(most_populated_clusters$cluster))\nt <- t[order(t[,2], decreasing=TRUE),]\np <- data.frame(factorName=rownames(t), binCount=t[,1], percentFound=t[,2])\nmost_populated_clusters <- merge(x=most_populated_clusters, y=p, by.x = 'cluster', by.y='factorName', all.x=T)\nmost_populated_clusters <- most_populated_clusters[rev(order(most_populated_clusters$binCount)),]\nnames(most_populated_clusters) <-  c('cluster','entry')\nreturn (most_populated_clusters[c('cluster','entry')])\n\n",
    "created" : 1502824461144.000,
    "dirty" : true,
    "encoding" : "",
    "folds" : "",
    "hash" : "851600532",
    "id" : "49BC87AD",
    "lastKnownWriteTime" : 3255295627468218995,
    "last_content_update" : 1502834651968,
    "path" : null,
    "project_path" : null,
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}